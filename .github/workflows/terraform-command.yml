name: terraform-command-workflow

on:
  workflow_call:
    inputs:
      command:
        required: true
        type: string
      env_prefixes:
        required: false
        type: string
        default: ''

    secrets:
      AWS_REGION:
        required: true
      # S3_TERRAFORM_STATE_REGION:
      #   required: true
      # S3_TERRAFORM_STATE_BUCKET:
      #   required: true
      # ACTION_IAM_ROLE:
      #   required: true

jobs:
  run_tf_command:
    runs-on: ubuntu-latest

    env:
      TF_VAR_BUILD_STAGE: ${{ github.ref_name }}
      TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_VAR_STATE_BUCKET: ${{ secrets.S3_TERRAFORM_STATE_BUCKET }}
      TF_VAR_SERVICE: ml-core
      S3_TERRAFORM_STATE_KEY: "${{ secrets.AWS_REGION }}/ml-core/${{ github.ref_name }}"
      S3_TERRAFORM_STATE_REGION: ${{ secrets.S3_TERRAFORM_STATE_REGION }}

    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: ${{ secrets.ACTION_IAM_ROLE }}
      #     role-session-name: GithubActionsDeployML
      #     aws-region: ${{ env.TF_VAR_AWS_REGION }}

      - name: tfsec
        if: ${{ inputs.command == 'plan' }}
        uses: aquasecurity/tfsec-action@v1.0.2
        with:
          soft_fail: true

      # - name: Downcase key
      #   run: |
      #     echo "S3_TERRAFORM_STATE_KEY=${S3_TERRAFORM_STATE_KEY,,}" >>${GITHUB_ENV}

      # - name: Creating state bucket
      #   run: S3_TERRAFORM_STATE_BUCKET=${{ env.TF_VAR_STATE_BUCKET }} S3_TERRAFORM_STATE_REGION=${{ env.TF_VAR_AWS_REGION }} bash deployment-scripts/create-bucket.sh

      # - name: Terraform Init
      #   id: init
      #   run: terraform init -backend-config="bucket=$TF_VAR_STATE_BUCKET" -backend-config="key=$S3_TERRAFORM_STATE_KEY" -backend-config="region=$S3_TERRAFORM_STATE_REGION"

      # - name: Terraform Command
      #   id: command
      #   run: ${{ inputs.env_prefixes }} terraform ${{ inputs.command }}
